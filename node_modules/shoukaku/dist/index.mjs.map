{"version":3,"sources":["../src/Constants.ts","../package.json","../src/model/Library.ts","../src/Utils.ts","../src/model/Errors.ts","../src/connectors/Connector.ts","../src/guild/Connection.ts","../src/guild/Player.ts","../src/model/Node.ts","../src/model/Player.ts","../src/model/Rest.ts","../src/node/Node.ts","../src/node/Rest.ts","../src/Shoukaku.ts"],"sourcesContent":["import Info from '../package.json';\nimport { ConnectionState } from './model/Library';\nimport type { NodeOption, OptionalOptions } from './Shoukaku';\n\nexport const Versions = {\n\tREST_VERSION: 4,\n\tWEBSOCKET_VERSION: 4\n};\n\nexport const ShoukakuDefaults: Required<OptionalOptions> = {\n\tresume: false,\n\tresumeTimeout: 30,\n\treconnectTries: 3,\n\treconnectInterval: 5,\n\trestTimeout: 60,\n\tmoveOnDisconnect: true,\n\tuserAgent: 'Discord Bot/unknown (https://github.com/shipgirlproject/Shoukaku.git)',\n\tstructures: {},\n\tvoiceConnectionTimeout: 15,\n\tnodeResolver: (nodes) => [ ...nodes.values() ]\n\t\t.filter(node => node.state === ConnectionState.Connected)\n\t\t.sort((a, b) => a.penalties - b.penalties)\n\t\t.shift()\n};\n\nexport const ShoukakuClientInfo = `${Info.name}/${Info.version} (${Info.repository.url})`;\n\nexport const NodeDefaults: NodeOption = {\n\tname: 'Default',\n\turl: '',\n\tauth: '',\n\tsecure: false,\n\tgroup: undefined\n};\n","{\n  \"name\": \"shoukaku\",\n  \"version\": \"5.0.0-dev\",\n  \"description\": \"A stable and updated wrapper around Lavalink\",\n  \"main\": \"dist/index.js\",\n  \"module\": \"dist/index.mjs\",\n  \"types\": \"dist/index.d.ts\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./dist/index.d.ts\",\n      \"import\": \"./dist/index.mjs\",\n      \"require\": \"./dist/index.js\"\n    }\n  },\n  \"scripts\": {\n    \"build\": \"npm run build:ts && npm run build:docs\",\n    \"build:ts\": \"tsup --config tsup-config.json\",\n    \"build:docs\": \"typedoc --theme default --readme TypeDoc.md --name Shoukaku --out docs/ --entryPointStrategy expand src/.\",\n    \"lint\": \"eslint .\",\n    \"prepare\": \"npm run build:ts\"\n  },\n  \"keywords\": [\n    \"bot\",\n    \"music\",\n    \"lavalink\",\n    \"api\",\n    \"discord\",\n    \"lavalink.js\",\n    \"discord.js\",\n    \"lavalink-api\",\n    \"weeb-library\"\n  ],\n  \"engines\": {\n    \"node\": \">=18.0.0\",\n    \"npm\": \">=7.0.0\"\n  },\n  \"author\": \"Saya\",\n  \"license\": \"MIT\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/shipgirlproject/Shoukaku.git\"\n  },\n  \"dependencies\": {\n    \"ws\": \"^8.18.2\"\n  },\n  \"devDependencies\": {\n    \"@shipgirl/eslint-config\": \"^0.4.2\",\n    \"@types/node\": \"^22.15.30\",\n    \"@types/ws\": \"^8.18.1\",\n    \"eslint\": \"^9.28.0\",\n    \"pkg-pr-new\": \"^0.0.51\",\n    \"tsup\": \"^8.5.0\",\n    \"typedoc\": \"^0.28.5\",\n    \"typescript\": \"^5.8.3\"\n  }\n}\n","export enum ConnectionState {\n\tConnecting,\n\tConnected,\n\tDisconnecting,\n\tDisconnected\n}\n\nexport enum VoiceState {\n\tSessionReady,\n\tSessionIdMissing,\n\tAbortError,\n\tSessionEndpointMissing,\n\tSessionFailedUpdate\n}\n\nexport enum Events {\n\tReconnecting = 'reconnecting',\n\tDebug = 'debug',\n\tError = 'error',\n\tReady = 'ready',\n\tClose = 'close',\n\tDisconnect = 'disconnect',\n\tPlayerUpdate = 'playerUpdate',\n\tPlayerEvent = 'playerEvent'\n}\n","import { EventEmitter } from 'node:events';\nimport { MergeError, UnexpectedError } from './model/Errors';\n\n// https://stackoverflow.com/a/67244127\nexport abstract class TypedEventEmitter<E extends string | symbol, T extends Record<E, unknown[]>> extends EventEmitter {\n\tprotected constructor() {\n\t\tsuper();\n\t}\n\n\ton<K extends Extract<keyof T, string> | symbol>(eventName: K, listener: (...args: T[Extract<K, string>]) => void): this {\n\t\treturn super.on(eventName, listener);\n\t}\n\n\tonce<K extends Extract<keyof T, string> | symbol>(eventName: K, listener: (...args: T[Extract<K, string>]) => void): this {\n\t\treturn super.once(eventName, listener);\n\t}\n\n\toff<K extends Extract<keyof T, string> | symbol>(eventName: K, listener: (...args: T[Extract<K, string>]) => void): this {\n\t\treturn super.off(eventName, listener);\n\t}\n\n\temit<K extends Extract<keyof T, string> | symbol>(eventName: K, ...args: T[Extract<K, string>]): boolean {\n\t\treturn super.emit(eventName, ...args);\n\t}\n}\n\nexport type Constructor<T> = new (...args: unknown[]) => T;\n\n/**\n * Merge the default options to user input\n * @param def Default options\n * @param given User input\n * @returns Merged options\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function mergeDefault<T extends Record<string, any>>(def: T, given: T): Required<T> {\n\tif (!given) return def as Required<T>;\n\tconst defaultKeys: (keyof T)[] = Object.keys(def);\n\tfor (const key in given) {\n\t\tif (defaultKeys.includes(key)) continue;\n\t\tdelete given[key];\n\t}\n\tfor (const key of defaultKeys) {\n\t\tif (def[key] === null || (typeof def[key] === 'string' && def[key].length === 0)) {\n\t\t\tif (!given[key]) throw new MergeError<T>(String(key), given);\n\t\t}\n\t\tif (given[key] === null || given[key] === undefined) given[key] = def[key];\n\t}\n\treturn given as Required<T>;\n}\n\n/**\n * Wait for a specific amount of time (timeout)\n * @param ms Time to wait in milliseconds\n * @returns A promise that resolves in x seconds\n */\nexport function wait(ms: number): Promise<void> {\n\treturn new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport function validate<T>(value: T | undefined): T {\n\tif (typeof value === 'undefined') {\n\t\tthrow new UnexpectedError();\n\t}\n\n\treturn value;\n}\n","import { VoiceState } from './Library';\n\nexport class ShoukakuError<T> extends Error {\n\tpublic readonly context: T;\n\tconstructor(context: T, message: string) {\n\t\tsuper(message);\n\t\tthis.context = context;\n\t}\n}\n\nexport class MergeError<T> extends Error {\n\tpublic readonly supplied: T;\n\tconstructor(key: string, supplied: T) {\n\t\tsuper(`${key} was not found from the given options`);\n\t\tthis.supplied = supplied;\n\t}\n}\n\nexport class UnexpectedError extends Error {\n\tconstructor() {\n\t\tsuper('Unexepcted undefined value on a variable that is supposed not to');\n\t}\n}\n\nexport class ConnectionError extends Error {\n\tpublic readonly type: VoiceState;\n\tconstructor(type: VoiceState) {\n\t\tlet message: string;\n\n\t\tswitch (type) {\n\t\t\tcase VoiceState.SessionEndpointMissing: {\n\t\t\t\tmessage = 'The voice connection is not established due to missing connection endpoint';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase VoiceState.SessionIdMissing: {\n\t\t\t\tmessage = 'The voice connection is not established due to missing session id';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: throw new UnexpectedError();\n\t\t}\n\n\t\tsuper(message);\n\n\t\tthis.type = type;\n\t}\n}\n\nexport class ConnectionConnectTimeout extends Error {\n\tconstructor(time: number) {\n\t\tsuper(`The voice connection is not established in ${time} second(s)`);\n\t}\n}\n\nexport class PlayerDerefError extends Error {\n\tconstructor(guildId: string) {\n\t\tsuper(`The guild (${guildId}) connection can't be found, either you try to recreate the connection, or clean this up`);\n\t}\n}\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access  */\n/* eslint-disable @typescript-eslint/no-explicit-any          */\n/* eslint-disable @typescript-eslint/no-unsafe-call           */\n/* eslint-disable @typescript-eslint/no-unsafe-return         */\n\nimport type { ServerUpdate, StateUpdatePartial } from '../guild/Connection';\nimport type { Shoukaku } from '../Shoukaku';\n\nexport interface ConnectorOptions {\n\tclient: unknown;\n\tsendPacket: (client: unknown, shardId: number, payload: unknown) => void;\n\tlistenEvent: (client: unknown, handler: (packet: any) => void) => void;\n}\n\nexport const AllowedPackets = [ 'VOICE_STATE_UPDATE', 'VOICE_SERVER_UPDATE' ];\n\n/**\n * Wrapper class around shoukaku to Discord websocket communication\n */\nexport class Connector {\n\tprotected readonly manager: Shoukaku;\n\tprotected readonly options: ConnectorOptions;\n\tconstructor(manager: Shoukaku, options: ConnectorOptions) {\n\t\tthis.manager = manager;\n\t\tthis.options = options;\n\t\tthis.options.listenEvent(options.client, this.handleRaw.bind(this));\n\t}\n\n\tprivate handleRaw(packet: any): void {\n\t\tif (!AllowedPackets.includes(packet.t as string)) return;\n\n\t\tconst guildId = packet.d.guild_id as string;\n\t\tconst connection = this.manager.connections.find(conn => conn.guildId === guildId);\n\n\t\tif (!connection) return;\n\n\t\tif (packet.t === 'VOICE_SERVER_UPDATE') return connection.setServerUpdate(packet.d as ServerUpdate);\n\n\t\tconst userId = packet.d.user_id as string;\n\n\t\tif (userId !== this.manager.userId) return;\n\n\t\tconnection.setStateUpdate(packet.d as StateUpdatePartial);\n\t}\n\n\tpublic sendPacket(shardId: number, payload: unknown) {\n\t\treturn this.options.sendPacket(this.options.client, shardId, payload);\n\t}\n}\n\n/**\n * @param client Discord.JS client\n * Creates a DiscordJS Connector option\n */\nexport function createDiscordJSOptions(client: unknown): ConnectorOptions {\n\treturn {\n\t\tclient,\n\t\tsendPacket: (client: any, shardId: number, payload: unknown) => {\n\t\t\treturn client.ws.shards.get(shardId)?.send(payload, false);\n\t\t},\n\t\tlistenEvent: (client: any, handler) => {\n\t\t\treturn void client.on('raw', handler);\n\t\t}\n\t};\n}\n\n/**\n * @param client Eris client\n * Creates an Eris Connector option\n */\nexport function createErisOptions(client: unknown): ConnectorOptions {\n\treturn {\n\t\tclient,\n\t\tsendPacket: (client: any, shardId: number, payload: any) => {\n\t\t\treturn client.shards.get(shardId)?.sendWS(payload.op, payload.d, false);\n\t\t},\n\t\tlistenEvent: (client: any, handler) => {\n\t\t\treturn void client.on('rawWS', handler);\n\t\t}\n\t};\n}\n\n/**\n * @param client OceanicJS client\n * Creates a OceanicJS Connector option\n */\nexport function createOceanicOptions(client: unknown): ConnectorOptions {\n\treturn {\n\t\tclient,\n\t\tsendPacket: (client: any, shardId: number, payload: any) => {\n\t\t\treturn client.shards.get(shardId)?.send(payload.op, payload.d, false);\n\t\t},\n\t\tlistenEvent: (client: any, handler) => {\n\t\t\treturn void client.on('packet', handler);\n\t\t}\n\t};\n}\n\n/**\n * @param client Seyfert client\n * Creates a Seyfert Connector option\n */\nexport function createSeyfertOptions(client: unknown): ConnectorOptions {\n\treturn {\n\t\tclient,\n\t\tsendPacket: (client: any, shardId: number, payload: any) => {\n\t\t\treturn client.gateway.send(shardId, payload);\n\t\t},\n\t\tlistenEvent: (client: any, handler) => {\n\t\t\tclient.events.values.RAW = {\n\t\t\t\tdata: { name: 'raw' },\n\t\t\t\trun: handler\n\t\t\t};\n\t\t}\n\t};\n}\n","import { EventEmitter, once } from 'node:events';\nimport { ConnectionError, ConnectionConnectTimeout } from '../model/Errors';\nimport { ConnectionState, Events, VoiceState } from '../model/Library';\nimport type { Node } from '../node/Node';\nimport type { Shoukaku, VoiceChannelOptions } from '../Shoukaku';\n\n/**\n * Represents the partial payload from a stateUpdate event\n */\nexport interface StateUpdatePartial {\n\tchannel_id?: string;\n\tsession_id?: string;\n\tself_deaf: boolean;\n\tself_mute: boolean;\n}\n\n/**\n * Represents the payload from a serverUpdate event\n */\nexport interface ServerUpdate {\n\ttoken: string;\n\tguild_id: string;\n\tendpoint: string;\n}\n\n/**\n * Represents a connection to a Discord voice channel\n */\nexport class Connection extends EventEmitter {\n\t/**\n\t * The manager where this connection is on\n\t */\n\tpublic manager: Shoukaku;\n\t/**\n\t * GuildId of the connection that is being managed by this instance\n\t */\n\tpublic guildId: string;\n\t/**\n\t * VoiceChannelId of the connection that is being managed by this instance\n\t */\n\tpublic channelId: string | null;\n\t/**\n\t * ShardId where this connection sends data on\n\t */\n\tpublic shardId: number;\n\t/**\n\t * Mute status in connected voice channel\n\t */\n\tpublic muted: boolean;\n\t/**\n\t * Deafen status in connected voice channel\n\t */\n\tpublic deafened: boolean;\n\t/**\n\t * Id of the currently active voice channel connection\n\t */\n\tpublic sessionId: string | null;\n\t/**\n\t * Region of connected voice channel\n\t */\n\tpublic region: string | null;\n\t/**\n\t * Cached serverUpdate event from Lavalink\n\t */\n\tpublic serverUpdate: ServerUpdate | null;\n\t/**\n\t * Connection state\n\t */\n\tpublic state: ConnectionState;\n\t/**\n\t * @param manager The manager of this connection\n\t * @param options The options to pass in connection creation\n\t * @param options.guildId GuildId in which voice channel to connect to is located\n\t * @param options.shardId ShardId in which the guild exists\n\t * @param options.channelId ChannelId of voice channel to connect to\n\t * @param options.deaf Optional boolean value to specify whether to deafen the current bot user\n\t * @param options.mute Optional boolean value to specify whether to mute the current bot user\n\t */\n\tconstructor(manager: Shoukaku, options: VoiceChannelOptions) {\n\t\tsuper();\n\t\tthis.manager = manager;\n\t\tthis.guildId = options.guildId;\n\t\tthis.channelId = options.channelId;\n\t\tthis.shardId = options.shardId;\n\t\tthis.muted = options.mute ?? false;\n\t\tthis.deafened = options.deaf ?? false;\n\t\tthis.sessionId = null;\n\t\tthis.region = null;\n\t\tthis.serverUpdate = null;\n\t\tthis.state = ConnectionState.Disconnected;\n\t}\n\n\tpublic getNode(): Node | undefined {\n\t\treturn this.manager.nodes\n\t\t\t.find(node => node.connections.has(this));\n\t}\n\n\t/**\n\t * Set the deafen status for the current bot user\n\t * @param deaf Boolean value to indicate whether to deafen or un-deafen\n\t * @defaultValue false\n\t */\n\tpublic setDeaf(deaf = false): void {\n\t\tthis.deafened = deaf;\n\t\tthis.sendVoiceUpdate();\n\t}\n\n\t/**\n\t * Set the mute status for the current bot user\n\t * @param mute Boolean value to indicate whether to mute or unmute\n\t * @defaultValue false\n\t */\n\tpublic setMute(mute = false): void {\n\t\tthis.muted = mute;\n\t\tthis.sendVoiceUpdate();\n\t}\n\n\t/**\n\t * Disconnect the current bot user from the connected voice channel\n\t * @internal\n\t */\n\tpublic disconnect(): void {\n\t\tif (this.state === ConnectionState.Disconnected) return;\n\n\t\tthis.channelId = null;\n\t\tthis.deafened = false;\n\t\tthis.muted = false;\n\n\t\tthis.removeAllListeners();\n\t\tthis.sendVoiceUpdate();\n\n\t\tthis.state = ConnectionState.Disconnected;\n\n\t\tthis.debug(`[Voice] -> [Node] & [Discord] : Connection Destroyed | Guild: ${this.guildId}`);\n\t}\n\n\t/**\n\t * Connect the current bot user to a voice channel\n\t * @internal\n\t */\n\tpublic async connect(): Promise<void> {\n\t\tif (this.state !== ConnectionState.Disconnected) return;\n\n\t\tthis.state = ConnectionState.Connecting;\n\n\t\tthis.sendVoiceUpdate();\n\n\t\tthis.debug(`[Voice] -> [Discord] : Requesting Connection | Guild: ${this.guildId}`);\n\n\t\tconst controller = new AbortController();\n\t\tconst timeout = setTimeout(() => controller.abort(), this.manager.options.voiceConnectionTimeout * 1000);\n\n\t\ttry {\n\t\t\tconst [ status ] = await once(this, 'connectionUpdate', { signal: controller.signal }) as [ VoiceState ];\n\n\t\t\tif (status !== VoiceState.SessionReady)\n\t\t\t\tthrow new ConnectionError(status);\n\n\t\t\tthis.state = ConnectionState.Connected;\n\t\t} catch (e: unknown) {\n\t\t\tthis.state = ConnectionState.Disconnected;\n\n\t\t\tconst error = e as Error;\n\n\t\t\tthis.debug(`[Voice] </- [Discord] : Request Connection Failed | Guild: ${this.guildId}`);\n\n\t\t\tif (error.name === 'AbortError')\n\t\t\t\tthrow new ConnectionConnectTimeout(this.manager.options.voiceConnectionTimeout);\n\n\t\t\tthrow error;\n\t\t} finally {\n\t\t\tclearTimeout(timeout);\n\t\t}\n\t}\n\n\t/**\n\t * Updates SessionId, ChannelId, Deafen and Mute data of this instance\n\t * @param options\n\t * @param options.session_id Id of the current session\n\t * @param options.channel_id Id of the connected voice channel\n\t * @param options.self_deaf Boolean that indicates if the current bot user is deafened or not\n\t * @param options.self_mute Boolean that indicates if the current bot user is muted or not\n\t * @internal\n\t */\n\tpublic setStateUpdate({ session_id, channel_id, self_deaf, self_mute }: StateUpdatePartial): void {\n\t\tif (channel_id && channel_id !== this.channelId) {\n\t\t\tthis.debug(`[Voice] <- [Discord] : Channel Moved | Old Channel: ${this.channelId} Guild: ${this.guildId}`);\n\t\t}\n\n\t\tthis.channelId = channel_id ?? null;\n\n\t\tif (!this.channelId) {\n\t\t\tthis.state = ConnectionState.Disconnected;\n\t\t\tthis.debug(`[Voice] <- [Discord] : Channel Disconnected | Guild: ${this.guildId}`);\n\t\t\tthis.manager.leaveVoiceChannel(this.guildId);\n\t\t}\n\n\t\tthis.deafened = self_deaf;\n\t\tthis.muted = self_mute;\n\t\tthis.sessionId = session_id ?? null;\n\n\t\tthis.debug(`[Voice] <- [Discord] : State Update Received | Channel: ${this.channelId} Session ID: ${session_id} Guild: ${this.guildId}`);\n\t}\n\n\t/**\n\t * Sets the server update data for this connection\n\t * @internal\n\t */\n\tpublic setServerUpdate(data: ServerUpdate): void {\n\t\tif (!data.endpoint) {\n\t\t\tthis.debug(`[Voice] <- [Discord] : Received a voice server update without an endpoint! Data => ${JSON.stringify(data)}`);\n\n\t\t\treturn void this.emit('connectionUpdate', VoiceState.SessionEndpointMissing);\n\t\t}\n\t\tif (!this.sessionId) {\n\t\t\tthis.debug(`[Voice] <- [Discord] : Received a voice server update without an session id! Data => ${JSON.stringify(data)}`);\n\n\t\t\treturn void this.emit('connectionUpdate', VoiceState.SessionIdMissing);\n\t\t}\n\n\t\tconst region = data.endpoint.split('.').shift()?.replace(/[0-9]/g, '');\n\n\t\tif (region !== this.region) {\n\t\t\tthis.debug(`[Voice] <- [Discord] : Voice Region Moved | Old Region: ${this.region} New Region: ${region} Guild: ${this.guildId}`);\n\t\t}\n\n\t\tthis.region = region ?? null;\n\n\t\tthis.serverUpdate = data;\n\n\t\tthis.debug(`[Voice] <- [Discord] : Server Update Received | Server: ${this.region} Guild: ${this.guildId}`);\n\n\t\tif (this.state !== ConnectionState.Connected) {\n\t\t\treturn void this.emit('connectionUpdate', VoiceState.SessionReady);\n\t\t}\n\n\t\tconst node = this.getNode();\n\n\t\tif (!node) return;\n\n\t\tnode.rest\n\t\t\t.updatePlayer(this.guildId, {\n\t\t\t\tvoice: {\n\t\t\t\t\ttoken: data.token,\n\t\t\t\t\tendpoint: data.endpoint,\n\t\t\t\t\tsessionId: this.sessionId\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(() => null);\n\t}\n\n\t/**\n\t * Send voice data to discord\n\t * @internal\n\t */\n\tpublic sendVoiceUpdate() {\n\t\tthis.send({ guild_id: this.guildId, channel_id: this.channelId, self_deaf: this.deafened, self_mute: this.muted });\n\t}\n\n\t/**\n\t * Send data to Discord\n\t * @param data The data to send\n\t * @private\n\t * @internal\n\t */\n\tprivate send(data: unknown): void {\n\t\tthis.manager.connector.sendPacket(this.shardId, { op: 4, d: data });\n\t}\n\n\t/**\n\t * Emits a debug log\n\t * @private\n\t * @internal\n\t */\n\tprivate debug(message: string): void {\n\t\tthis.manager.emit(Events.Debug, message);\n\t}\n}\n","import { PlayerDerefError } from '../model/Errors';\nimport type {\n\tBand,\n\tChannelMixSettings,\n\tDistortionSettings,\n\tFilterOptions,\n\tFreqSettings,\n\tKaraokeSettings,\n\tLowPassSettings,\n\tPlayOptions,\n\tRotationSettings,\n\tTimescaleSettings\n} from '../model/Player';\nimport type { LavalinkPlayer, UpdatePlayerOptions } from '../model/Rest';\nimport type { Node } from '../node/Node';\nimport type { Connection } from './Connection';\n\n/**\n * Wrapper object around Lavalink\n */\nexport class Player {\n\t/**\n\t * GuildId of this player\n\t */\n\tpublic readonly guildId: string;\n\t/**\n\t * Lavalink node this player is connected to\n\t */\n\tpublic connection: WeakRef<Connection>;\n\n\tconstructor(connection: WeakRef<Connection>) {\n\t\tif (!connection.deref()) throw new PlayerDerefError('Unknown');\n\t\tthis.guildId = connection.deref()!.guildId;\n\t\tthis.connection = connection;\n\t}\n\n\tget node(): Node {\n\t\tconst node = this.connection.deref()?.getNode();\n\n\t\tif (!node) {\n\t\t\tthrow new PlayerDerefError(this.guildId);\n\t\t}\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Gets the current player info from lavalink\n\t */\n\tpublic getData(): Promise<LavalinkPlayer> {\n\t\treturn this.node.rest.getPlayer(this.guildId);\n\t}\n\n\t/**\n\t * Destroys the player in remote Lavalink side\n\t */\n\tpublic async destroy(): Promise<void> {\n\t\tawait this.node.rest.destroyPlayer(this.guildId);\n\t}\n\n\t/**\n\t * Play a new track\n\t */\n\tpublic async playTrack(playerOptions: PlayOptions, noReplace = false): Promise<void> {\n\t\tawait this.update(playerOptions, noReplace);\n\t}\n\n\t/**\n\t * Stop the currently playing track\n\t */\n\tpublic async stopTrack(): Promise<void> {\n\t\tawait this.update({ track: { encoded: null }, position: 0 });\n\t}\n\n\t/**\n\t * Pause or unpause the currently playing track\n\t * @param paused Boolean value to specify whether to pause or unpause the current bot user\n\t */\n\tpublic async setPaused(paused = true): Promise<void> {\n\t\tawait this.update({ paused });\n\t}\n\n\t/**\n\t * Seek to a specific time in the currently playing track\n\t * @param position Position to seek to in milliseconds\n\t */\n\tpublic async seekTo(position: number): Promise<void> {\n\t\tawait this.update({ position });\n\t}\n\n\t/**\n\t * Sets the global volume of the player\n\t * @param volume Target volume 0-1000\n\t */\n\tpublic async setGlobalVolume(volume: number): Promise<void> {\n\t\tawait this.update({ volume });\n\t}\n\n\t/**\n\t * Sets the filter volume of the player\n\t * @param volume Target volume 0.0-5.0\n\t */\n\tasync setFilterVolume(volume: number): Promise<void> {\n\t\treturn this.setFilters({ volume });\n\t}\n\n\t/**\n\t * Change the equalizer settings applied to the currently playing track\n\t * @param equalizer An array of objects that conforms to the Bands type that define volumes at different frequencies\n\t */\n\tpublic async setEqualizer(equalizer: Band[]): Promise<void> {\n\t\treturn this.setFilters({ equalizer });\n\t}\n\n\t/**\n\t * Change the karaoke settings applied to the currently playing track\n\t * @param karaoke An object that conforms to the KaraokeSettings type that defines a range of frequencies to mute\n\t */\n\tpublic setKaraoke(karaoke?: KaraokeSettings): Promise<void> {\n\t\treturn this.setFilters({ karaoke: karaoke ?? null });\n\t}\n\n\t/**\n\t * Change the timescale settings applied to the currently playing track\n\t * @param timescale An object that conforms to the TimescaleSettings type that defines the time signature to play the audio at\n\t */\n\tpublic setTimescale(timescale?: TimescaleSettings): Promise<void> {\n\t\treturn this.setFilters({ timescale: timescale ?? null });\n\t}\n\n\t/**\n\t * Change the tremolo settings applied to the currently playing track\n\t * @param tremolo An object that conforms to the FreqSettings type that defines an oscillation in volume\n\t */\n\tpublic setTremolo(tremolo?: FreqSettings): Promise<void> {\n\t\treturn this.setFilters({ tremolo: tremolo ?? null });\n\t}\n\n\t/**\n\t * Change the vibrato settings applied to the currently playing track\n\t * @param vibrato An object that conforms to the FreqSettings type that defines an oscillation in pitch\n\t */\n\tpublic setVibrato(vibrato?: FreqSettings): Promise<void> {\n\t\treturn this.setFilters({ vibrato: vibrato ?? null });\n\t}\n\n\t/**\n\t * Change the rotation settings applied to the currently playing track\n\t * @param rotation An object that conforms to the RotationSettings type that defines the frequency of audio rotating round the listener\n\t */\n\tpublic setRotation(rotation?: RotationSettings): Promise<void> {\n\t\treturn this.setFilters({ rotation: rotation ?? null });\n\t}\n\n\t/**\n\t * Change the distortion settings applied to the currently playing track\n\t * @param distortion An object that conforms to DistortionSettings that defines distortions in the audio\n\t * @returns The current player instance\n\t */\n\tpublic setDistortion(distortion?: DistortionSettings): Promise<void> {\n\t\treturn this.setFilters({ distortion: distortion ?? null });\n\t}\n\n\t/**\n\t * Change the channel mix settings applied to the currently playing track\n\t * @param channelMix An object that conforms to ChannelMixSettings that defines how much the left and right channels affect each other (setting all factors to 0.5 causes both channels to get the same audio)\n\t */\n\tpublic setChannelMix(channelMix?: ChannelMixSettings): Promise<void> {\n\t\treturn this.setFilters({ channelMix: channelMix ?? null });\n\t}\n\n\t/**\n\t * Change the low pass settings applied to the currently playing track\n\t * @param lowPass An object that conforms to LowPassSettings that defines the amount of suppression on higher frequencies\n\t */\n\tpublic setLowPass(lowPass?: LowPassSettings): Promise<void> {\n\t\treturn this.setFilters({ lowPass: lowPass ?? null });\n\t}\n\n\t/**\n\t * Change the all filter settings applied to the currently playing track\n\t * @param filters An object that conforms to FilterOptions that defines all filters to apply/modify\n\t */\n\tpublic async setFilters(filters: FilterOptions): Promise<void> {\n\t\tawait this.update({ filters });\n\t}\n\n\t/**\n\t * Clear all filters applied to the currently playing track\n\t */\n\tpublic async clearFilters(): Promise<void> {\n\t\tawait this.update({ filters: undefined });\n\t}\n\n\t/**\n\t * If you want to update the whole player yourself, sends raw update player info to lavalink\n\t * @param playerOptions Options to update the player data\n\t * @param noReplace Set it to true if you don't want to replace the currently playing track\n\t */\n\tpublic async update(playerOptions: UpdatePlayerOptions, noReplace = false): Promise<LavalinkPlayer> {\n\t\treturn this.node.rest.updatePlayer(this.guildId, playerOptions, noReplace);\n\t}\n\n\t/**\n\t * Sends server update to lavalink\n\t * @internal\n\t */\n\tpublic async sendServerUpdate(connection: Connection): Promise<void> {\n\t\tawait this.node.rest.updatePlayer(this.guildId, {\n\t\t\tvoice: {\n\t\t\t\ttoken: connection.serverUpdate!.token,\n\t\t\t\tendpoint: connection.serverUpdate!.endpoint,\n\t\t\t\tsessionId: connection.sessionId!\n\t\t\t}\n\t\t}, false);\n\t}\n}\n","export enum LavalinkOpCodes {\n\tReady = 'ready',\n\tPlayerUpdate = 'playerUpdate',\n\tStats = 'stats',\n\tEvent = 'event'\n}\n\nexport interface Ready {\n\top: LavalinkOpCodes.Ready;\n\tresumed: boolean;\n\tsessionId: string;\n}\n\nexport interface NodeMemory {\n\treservable: number;\n\tused: number;\n\tfree: number;\n\tallocated: number;\n}\n\nexport interface NodeFrameStats {\n\tsent: number;\n\tdeficit: number;\n\tnulled: number;\n}\n\nexport interface NodeCpu {\n\tcores: number;\n\tsystemLoad: number;\n\tlavalinkLoad: number;\n}\n\nexport interface Stats {\n\top: LavalinkOpCodes.Stats;\n\tplayers: number;\n\tplayingPlayers: number;\n\tmemory: NodeMemory;\n\tframeStats: NodeFrameStats | null;\n\tcpu: NodeCpu;\n\tuptime: number;\n}\n\nexport interface NodeInfoVersion {\n\tsemver: string;\n\tmajor: number;\n\tminor: number;\n\tpatch: number;\n\tpreRelease?: string;\n\tbuild?: string;\n}\n\nexport interface NodeInfoGit {\n\tbranch: string;\n\tcommit: string;\n\tcommitTime: number;\n}\n\nexport interface NodeInfoPlugin {\n\tname: string;\n\tversion: string;\n}\n\nexport interface NodeInfo {\n\tversion: NodeInfoVersion;\n\tbuildTime: number;\n\tgit: NodeInfoGit;\n\tjvm: string;\n\tlavaplayer: string;\n\tsourceManagers: string[];\n\tfilters: string[];\n\tplugins: NodeInfoPlugin[];\n}\n","import type { LavalinkOpCodes } from './Node';\nimport type { Exception, Track, UpdatePlayerOptions } from './Rest';\n\nexport type TrackEndReason = 'finished' | 'loadFailed' | 'stopped' | 'replaced' | 'cleanup';\nexport type PlayOptions = Omit<UpdatePlayerOptions, 'filters' | 'voice'>;\n\nexport enum PlayerEventType {\n\tTrackStartEvent = 'TrackStartEvent',\n\tTrackEndEvent = 'TrackEndEvent',\n\tTrackExceptionEvent = 'TrackExceptionEvent',\n\tTrackStuckEvent = 'TrackStuckEvent',\n\tWebsocketClosedEvent = 'WebSocketClosedEvent'\n}\n\nexport interface Band {\n\tband: number;\n\tgain: number;\n}\n\nexport interface KaraokeSettings {\n\tlevel?: number;\n\tmonoLevel?: number;\n\tfilterBand?: number;\n\tfilterWidth?: number;\n}\n\nexport interface TimescaleSettings {\n\tspeed?: number;\n\tpitch?: number;\n\trate?: number;\n}\n\nexport interface FreqSettings {\n\tfrequency?: number;\n\tdepth?: number;\n}\n\nexport interface RotationSettings {\n\trotationHz?: number;\n}\n\nexport interface DistortionSettings {\n\tsinOffset?: number;\n\tsinScale?: number;\n\tcosOffset?: number;\n\tcosScale?: number;\n\ttanOffset?: number;\n\ttanScale?: number;\n\toffset?: number;\n\tscale?: number;\n}\n\nexport interface ChannelMixSettings {\n\tleftToLeft?: number;\n\tleftToRight?: number;\n\trightToLeft?: number;\n\trightToRight?: number;\n}\n\nexport interface LowPassSettings {\n\tsmoothing?: number;\n}\n\nexport interface PlayerEvent {\n\top: LavalinkOpCodes.Event;\n\tguildId: string;\n}\n\nexport interface TrackStartEvent extends PlayerEvent {\n\ttype: PlayerEventType.TrackStartEvent;\n\ttrack: Track;\n}\n\nexport interface TrackEndEvent extends PlayerEvent {\n\ttype: PlayerEventType.TrackEndEvent;\n\ttrack: Track;\n\treason: TrackEndReason;\n}\n\nexport interface TrackStuckEvent extends PlayerEvent {\n\ttype: PlayerEventType.TrackStuckEvent;\n\ttrack: Track;\n\tthresholdMs: number;\n}\n\nexport interface TrackExceptionEvent extends PlayerEvent {\n\ttype: PlayerEventType.TrackExceptionEvent;\n\texception: Exception;\n}\n\nexport interface WebSocketClosedEvent extends PlayerEvent {\n\ttype: PlayerEventType.WebsocketClosedEvent;\n\tcode: number;\n\tbyRemote: boolean;\n\treason: string;\n}\n\nexport interface PlayerUpdate {\n\top: LavalinkOpCodes.PlayerUpdate;\n\tstate: {\n\t\tconnected: boolean;\n\t\tposition: number;\n\t\ttime: number;\n\t\tping: number;\n\t};\n\tguildId: string;\n}\n\nexport interface FilterOptions {\n\tvolume?: number;\n\tequalizer?: Band[];\n\tkaraoke?: KaraokeSettings | null;\n\ttimescale?: TimescaleSettings | null;\n\ttremolo?: FreqSettings | null;\n\tvibrato?: FreqSettings | null;\n\trotation?: RotationSettings | null;\n\tdistortion?: DistortionSettings | null;\n\tchannelMix?: ChannelMixSettings | null;\n\tlowPass?: LowPassSettings | null;\n}\n","import type { FilterOptions } from './Player';\n\nexport type Severity = 'common' | 'suspicious' | 'fault';\n\nexport enum LoadType {\n\tTrack = 'track',\n\tPlaylist = 'playlist',\n\tSearch = 'search',\n\tEmpty = 'empty',\n\tError = 'error'\n}\n\nexport interface Track {\n\tencoded: string;\n\tinfo: {\n\t\tidentifier: string;\n\t\tisSeekable: boolean;\n\t\tauthor: string;\n\t\tlength: number;\n\t\tisStream: boolean;\n\t\tposition: number;\n\t\ttitle: string;\n\t\turi?: string;\n\t\tartworkUrl?: string;\n\t\tisrc?: string;\n\t\tsourceName: string;\n\t};\n\tpluginInfo: unknown;\n}\n\nexport interface Playlist {\n\tencoded: string;\n\tinfo: {\n\t\tname: string;\n\t\tselectedTrack: number;\n\t};\n\tpluginInfo: unknown;\n\ttracks: Track[];\n}\n\nexport interface Exception {\n\tmessage: string;\n\tseverity: Severity;\n\tcause: string;\n}\n\nexport interface TrackResult {\n\tloadType: LoadType.Track;\n\tdata: Track;\n}\n\nexport interface PlaylistResult {\n\tloadType: LoadType.Playlist;\n\tdata: Playlist;\n}\n\nexport interface SearchResult {\n\tloadType: LoadType.Search;\n\tdata: Track[];\n}\n\nexport interface EmptyResult {\n\tloadType: LoadType.Empty;\n\tdata: Record<string, never>;\n}\n\nexport interface ErrorResult {\n\tloadType: LoadType.Error;\n\tdata: Exception;\n}\n\nexport type LavalinkResponse = TrackResult | PlaylistResult | SearchResult | EmptyResult | ErrorResult;\n\nexport interface Address {\n\taddress: string;\n\tfailingTimestamp: number;\n\tfailingTime: string;\n}\n\nexport interface RoutePlanner {\n\tclass: null | 'RotatingIpRoutePlanner' | 'NanoIpRoutePlanner' | 'RotatingNanoIpRoutePlanner' | 'BalancingIpRoutePlanner';\n\tdetails: null | {\n\t\tipBlock: {\n\t\t\ttype: string;\n\t\t\tsize: string;\n\t\t};\n\t\tfailingAddresses: Address[];\n\t\trotateIndex: string;\n\t\tipIndex: string;\n\t\tcurrentAddress: string;\n\t\tblockIndex: string;\n\t\tcurrentAddressIndex: string;\n\t};\n}\n\nexport interface LavalinkPlayerVoice {\n\ttoken: string;\n\tendpoint: string;\n\tsessionId: string;\n\tconnected?: boolean;\n\tping?: number;\n}\n\nexport type LavalinkPlayerVoiceOptions = Omit<LavalinkPlayerVoice, 'connected' | 'ping'>;\n\nexport interface LavalinkPlayer {\n\tguildId: string;\n\ttrack?: Track;\n\tvolume: number;\n\tpaused: boolean;\n\tvoice: LavalinkPlayerVoice;\n\tfilters: FilterOptions;\n}\n\nexport interface UpdatePlayerTrackOptions {\n\tencoded?: string | null;\n\tidentifier?: string;\n\tuserData?: unknown;\n}\n\nexport interface UpdatePlayerOptions {\n\ttrack?: UpdatePlayerTrackOptions;\n\tposition?: number;\n\tendTime?: number;\n\tvolume?: number;\n\tpaused?: boolean;\n\tfilters?: FilterOptions;\n\tvoice?: LavalinkPlayerVoiceOptions;\n}\n\nexport interface UpdatePlayerInfo {\n\tguildId: string;\n\tplayerOptions: UpdatePlayerOptions;\n\tnoReplace?: boolean;\n}\n\nexport interface SessionInfo {\n\tresumingKey?: string;\n\ttimeout: number;\n}\n","import Websocket from 'ws';\nimport { ShoukakuClientInfo, Versions } from '../Constants';\nimport type { Connection } from '../guild/Connection';\nimport { ConnectionState, Events } from '../model/Library';\nimport type { NodeInfo, Ready, Stats } from '../model/Node';\nimport { LavalinkOpCodes } from '../model/Node';\nimport type {\n\tPlayerUpdate,\n\tTrackEndEvent,\n\tTrackExceptionEvent,\n\tTrackStartEvent,\n\tTrackStuckEvent,\n\tWebSocketClosedEvent\n} from '../model/Player';\nimport type { NodeOption, Shoukaku } from '../Shoukaku';\nimport { wait } from '../Utils';\nimport { Rest } from './Rest';\n\nexport interface ResumableHeaders {\n\t[key: string]: string;\n\t'Client-Name': string;\n\t'User-Agent': string;\n\t'Authorization': string;\n\t'User-Id': string;\n\t'Session-Id': string;\n}\n\nexport type NonResumableHeaders = Omit<ResumableHeaders, 'Session-Id'>;\n\n/**\n * Represents a Lavalink node\n */\nexport class Node {\n\t/**\n     * Shoukaku class\n     */\n\tpublic readonly manager: Shoukaku;\n\t/**\n     * Lavalink rest API\n     */\n\tpublic readonly rest: Rest;\n\t/**\n     * Name of this node\n     */\n\tpublic readonly name: string;\n\t/**\n     * Group in which this node is contained\n     */\n\tpublic readonly group?: string;\n\t/**\n     * URL of Lavalink\n     */\n\tprivate readonly url: string;\n\t/**\n     * Credentials to access Lavalink\n     */\n\tprivate readonly auth: string;\n\t/**\n     * The state of this connection\n\t * @readonly\n     */\n\tpublic state: ConnectionState;\n\t/**\n\t * The number of reconnects to Lavalink\n\t * @readonly\n\t */\n\tpublic reconnects: number;\n\t/**\n     * Statistics from Lavalink\n\t * @readonly\n     */\n\tpublic stats: Stats | null;\n\t/**\n     * Information about lavalink node\n\t * @readonly\n    */\n\tpublic info: NodeInfo | null;\n\t/**\n     * SessionId of this Lavalink connection (not to be confused with Discord SessionId)\n\t * @readonly\n     */\n\tpublic sessionId: string | null;\n\t/**\n\t * Connections that are referenced by this node\n\t * @internal\n\t */\n\tpublic connections: WeakSet<Connection>;\n\t/**\n\t * Websocket instance\n\t * @private\n\t */\n\t#ws: Websocket | null;\n\t/**\n     * @param manager Shoukaku instance\n     * @param options Options on creating this node\n     * @param options.name Name of this node\n     * @param options.url URL of Lavalink\n     * @param options.auth Credentials to access Lavalnk\n     * @param options.secure Whether to use secure protocols or not\n     * @param options.group Group of this node\n     */\n\tconstructor(manager: Shoukaku, options: NodeOption) {\n\t\tthis.manager = manager;\n\t\tthis.rest = new (this.manager.options.structures.rest ?? Rest)(this, options);\n\t\tthis.name = options.name;\n\t\tthis.group = options.group;\n\t\tthis.auth = options.auth;\n\t\tthis.url = `${options.secure ? 'wss' : 'ws'}://${options.url}/v${Versions.WEBSOCKET_VERSION}/websocket`;\n\t\tthis.state = ConnectionState.Disconnected;\n\t\tthis.reconnects = 0;\n\t\tthis.stats = null;\n\t\tthis.info = null;\n\t\tthis.sessionId = null;\n\t\tthis.connections = new WeakSet();\n\t\tthis.#ws = null;\n\t}\n\n\t/**\n     * Penalties for load balancing\n     * @returns Penalty score\n     * @readonly\n     */\n\tpublic get penalties(): number {\n\t\tlet penalties = 0;\n\t\tif (!this.stats) return penalties;\n\n\t\tpenalties += this.stats.players;\n\t\tpenalties += Math.round(Math.pow(1.05, 100 * this.stats.cpu.systemLoad) * 10 - 10);\n\n\t\tif (this.stats.frameStats) {\n\t\t\tpenalties += this.stats.frameStats.deficit;\n\t\t\tpenalties += this.stats.frameStats.nulled * 2;\n\t\t}\n\n\t\treturn penalties;\n\t}\n\n\t/**\n\t * Node connections, this exists because weaksets can't be iterated on\n\t * @returns An array of connections being referenced by this node\n\t * @readonly\n\t * @internal\n\t */\n\tpublic get mappedConnections(): Connection[] {\n\t\treturn this.manager.connections.filter(connection => this.connections.has(connection));\n\t}\n\n\t/**\n     * Connect to Lavalink\n\t * @internal\n     */\n\tpublic async connect(): Promise<void>{\n\t\tif (this.state !== ConnectionState.Disconnected) return;\n\n\t\tthis.state = ConnectionState.Connecting;\n\n\t\tconst headers: NonResumableHeaders | ResumableHeaders = {\n\t\t\t'Client-Name': ShoukakuClientInfo,\n\t\t\t'User-Agent': this.manager.options.userAgent,\n\t\t\t'Authorization': this.auth,\n\t\t\t'User-Id': this.manager.userId\n\t\t};\n\n\t\tif (this.sessionId) {\n\t\t\theaders['Session-Id'] = this.sessionId;\n\n\t\t\tthis.manager.emit(Events.Debug, `[Socket] -> [${this.name}] : Session-Id is present, attempting to resume`);\n\t\t}\n\n\t\tthis.manager.emit(Events.Debug, `[Socket] -> [${this.name}] : Connecting to ${this.url} ...`);\n\n\t\tconst createConnection = () => {\n\t\t\tconst url = new URL(this.url);\n\n\t\t\tconst server = new Websocket(url.toString(), { headers } as Websocket.ClientOptions);\n\n\t\t\tconst cleanup = () => {\n\t\t\t\tserver.onopen = null;\n\t\t\t\tserver.onclose = null;\n\t\t\t\tserver.onerror = null;\n\t\t\t};\n\n\t\t\treturn new Promise<Websocket>((resolve, reject) => {\n\t\t\t\tserver.onopen = () => {\n\t\t\t\t\tcleanup();\n\t\t\t\t\tresolve(server);\n\t\t\t\t};\n\t\t\t\tserver.onclose = () => {\n\t\t\t\t\tcleanup();\n\t\t\t\t\treject(new Error('Websocket closed before a connection was established'));\n\t\t\t\t};\n\t\t\t\tserver.onerror = (error) => {\n\t\t\t\t\tcleanup();\n\t\t\t\t\treject(new Error(`Websocket failed to connect due to: ${error.message}`));\n\t\t\t\t};\n\t\t\t});\n\t\t};\n\n\t\tlet error: Error;\n\n\t\tfor (; this.reconnects < this.manager.options.reconnectTries; this.reconnects++) {\n\t\t\ttry {\n\t\t\t\tthis.#ws = await createConnection();\n\t\t\t\tbreak;\n\t\t\t} catch (err) {\n\t\t\t\tthis.manager.emit(Events.Debug, `[Socket] -> [${this.name}] : Reconnecting in ${this.manager.options.reconnectInterval} seconds. ${this.manager.options.reconnectTries - this.reconnects} tries left`);\n\t\t\t\tawait wait(this.manager.options.reconnectInterval * 1000);\n\t\t\t\terror = err as Error;\n\t\t\t}\n\t\t}\n\n\t\tthis.reconnects = 0;\n\n\t\tif (error!) {\n\t\t\tthis.state = ConnectionState.Disconnected;\n\n\t\t\tawait this.handleOnDisconnect();\n\n\t\t\tthrow error;\n\t\t}\n\n\t\tthis.#ws!.once('close', (...args) => void this.close(...args).catch(error => this.error(error as Error)));\n\t\tthis.#ws!.on('message', data => void this.message(data).catch(error => this.error(error as Error)));\n\t\tthis.#ws!.on('error', error => this.error(error));\n\t}\n\n\t/**\n     * Disconnect from Lavalink\n     * @param code Status code\n     * @param reason Reason for disconnect\n\t * @internal\n     */\n\tpublic destroy(code: number, reason?: string): void {\n\t\tvoid this.close(code, Buffer.from(reason ?? 'Unknown Reason', 'utf-8'), true);\n\t}\n\n\t/**\n     * Handle message from Lavalink\n     * @param message JSON message\n\t * @private\n     * @internal\n     */\n\tprivate async message(message: unknown): Promise<void> {\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\tconst json: Ready | Stats | PlayerUpdate | TrackStartEvent | TrackEndEvent | TrackStuckEvent | TrackExceptionEvent | WebSocketClosedEvent = JSON.parse(message as string);\n\n\t\tif (!json) return;\n\n\t\tswitch (json.op) {\n\t\t\tcase LavalinkOpCodes.Stats:\n\t\t\t\tthis.manager.emit(Events.Debug, `[Socket] <- [${this.name}] : Node Status Update | Server Load: ${this.penalties}`);\n\n\t\t\t\tthis.stats = json;\n\t\t\t\tbreak;\n\t\t\tcase LavalinkOpCodes.Ready: {\n\t\t\t\tthis.state = ConnectionState.Connected;\n\n\t\t\t\tif (!json.sessionId) {\n\n\t\t\t\t\tthis.manager.emit(Events.Debug, `[Socket] -> [${this.name}] : No session id found from ready op? disconnecting and reconnecting to avoid issues`);\n\n\t\t\t\t\treturn this.close(1000, Buffer.from('No session-id found upon firing ready event', 'utf-8'), false);\n\t\t\t\t}\n\n\t\t\t\tthis.sessionId = json.sessionId;\n\n\t\t\t\tthis.manager.emit(Events.Debug, `[Socket] -> [${this.name}] : Lavalink is ready to communicate !`);\n\n\t\t\t\tthis.manager.emit(Events.Ready, this, json.resumed);\n\n\t\t\t\tif (this.manager.options.resume) {\n\t\t\t\t\tawait this.rest.updateSession(this.manager.options.resume, this.manager.options.resumeTimeout);\n\n\t\t\t\t\tthis.manager.emit(Events.Debug, `[Socket] -> [${this.name}] : Resuming configured for this Session Id: ${this.sessionId}`);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase LavalinkOpCodes.Event: {\n\t\t\t\tthis.manager.emit(Events.PlayerEvent, this, json);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase LavalinkOpCodes.PlayerUpdate: {\n\t\t\t\tthis.manager.emit(Events.PlayerUpdate, this, json);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthis.manager.emit(Events.Debug, `[Player] -> [Node] : Unknown Message Op, Data => ${JSON.stringify(json)}`);\n\t\t}\n\t}\n\n\t/**\n     * Handle closed event from lavalink\n     * @param code Status close\n     * @param reason Reason for connection close\n\t * @param destroy If we should not try to connect again\n\t * @private\n\t * @internal\n     */\n\tprivate async close(code: number, reason: Buffer, destroy = false): Promise<void> {\n\t\tif (this.state === ConnectionState.Disconnected) return;\n\n\t\tthis.state = ConnectionState.Disconnecting;\n\n\t\tthis.manager.emit(Events.Debug, `[Socket] <-/-> [${this.name}] : Connection Closed, Code: ${code || 'Unknown Code'}`);\n\n\t\tthis.manager.emit(Events.Close, this,code, String(reason));\n\n\t\tthis.#ws?.removeAllListeners();\n\t\tthis.#ws?.terminate();\n\t\tthis.#ws = null;\n\n\t\tif (!this.manager.options.resume) {\n\t\t\tthis.sessionId = null;\n\t\t}\n\n\t\tthis.state = ConnectionState.Disconnected;\n\n\t\tif (destroy) {\n\t\t\tawait this.handleOnDisconnect();\n\t\t\treturn void this.manager.emit(Events.Disconnect, this);\n\t\t}\n\n\t\tawait this.connect();\n\t}\n\n\t/**\n\t * @private\n\t * @internal\n\t */\n\tprivate async handleOnDisconnect(): Promise<void> {\n\t\tconst connections = this.mappedConnections.map(async connection => {\n\t\t\tthis.connections.delete(connection);\n\n\t\t\tif (!this.manager.options.moveOnDisconnect) return;\n\n\t\t\tconst node = this.manager.getIdealNode(connection);\n\n\t\t\tif (!node || !connection.serverUpdate || !connection.sessionId) {\n\t\t\t\treturn void connection.disconnect();\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait node.rest.updatePlayer(connection.guildId, {\n\t\t\t\t\tvoice: {\n\t\t\t\t\t\tsessionId: connection.sessionId,\n\t\t\t\t\t\tendpoint: connection.serverUpdate.endpoint,\n\t\t\t\t\t\ttoken: connection.serverUpdate.token\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\t\t} catch (_) {\n\t\t\t\treturn void connection.disconnect();\n\t\t\t}\n\t\t});\n\n\t\tawait Promise.allSettled(connections);\n\t}\n\n\t/**\n     * To emit error events easily\n     * @param error error message\n\t * @private\n\t * @internal\n     */\n\tprivate error(error: Error): void {\n\t\tthis.manager.emit(Events.Error, this, error);\n\t}\n}\n","import { Versions } from '../Constants';\nimport type { NodeInfo, Stats } from '../model/Node';\nimport type {\n\tLavalinkPlayer,\n\tLavalinkResponse,\n\tRoutePlanner,\n\tSessionInfo,\n\tTrack,\n\tUpdatePlayerOptions\n} from '../model/Rest';\nimport type { NodeOption } from '../Shoukaku';\nimport { validate } from '../Utils';\nimport type { Node } from './Node';\n\ninterface FetchOptions {\n\tendpoint: string;\n\toptions: {\n\t\theaders?: Record<string, string>;\n\t\tparams?: Record<string, string>;\n\t\tmethod?: string;\n\t\tbody?: Record<string, unknown>;\n\t\t[key: string]: unknown;\n\t};\n}\n\ninterface FinalFetchOptions {\n\tmethod: string;\n\theaders: Record<string, string>;\n\tsignal: AbortSignal;\n\tbody?: string;\n}\n\n/**\n * Wrapper around Lavalink REST API\n */\nexport class Rest {\n\t/**\n\t * Node that initialized this instance\n\t */\n\tprotected readonly node: Node;\n\t/**\n\t * URL of Lavalink\n\t */\n\tprotected readonly url: string;\n\t/**\n\t * Credentials to access Lavalink\n\t */\n\tprotected readonly auth: string;\n\t/**\n\t * @param node An instance of Node\n\t * @param options The options to initialize this rest class\n\t * @param options.name Name of this node\n\t * @param options.url URL of Lavalink\n\t * @param options.auth Credentials to access Lavalink\n\t * @param options.secure Weather to use secure protocols or not\n\t * @param options.group Group of this node\n\t */\n\tconstructor(node: Node, options: NodeOption) {\n\t\tthis.node = node;\n\t\tthis.url = `${options.secure ? 'https' : 'http'}://${options.url}/v${Versions.REST_VERSION}`;\n\t\tthis.auth = options.auth;\n\t}\n\n\tprotected get sessionId(): string {\n\t\treturn this.node.sessionId!;\n\t}\n\n\t/**\n\t * Resolve a track\n\t * @param identifier Track ID\n\t * @returns A promise that resolves to a Lavalink response\n\t */\n\tpublic async resolve(identifier: string): Promise<LavalinkResponse> {\n\t\tconst options = {\n\t\t\tendpoint: '/loadtracks',\n\t\t\toptions: { params: { identifier }}\n\t\t};\n\n\t\treturn validate(await this.fetch<LavalinkResponse>(options));\n\t}\n\n\t/**\n\t * Decode a track\n\t * @param track Encoded track\n\t * @returns Promise that resolves to a track\n\t */\n\tpublic async decode(track: string): Promise<Track> {\n\t\tconst options = {\n\t\t\tendpoint: '/decodetrack',\n\t\t\toptions: { params: { track }}\n\t\t};\n\n\t\treturn validate(await this.fetch<Track>(options));\n\t}\n\n\t/**\n\t * Gets all the player with the specified sessionId\n\t * @returns Promise that resolves to an array of Lavalink players\n\t */\n\tpublic async getPlayers(): Promise<LavalinkPlayer[]> {\n\t\tconst options = {\n\t\t\tendpoint: `/sessions/${this.sessionId}/players`,\n\t\t\toptions: {}\n\t\t};\n\n\t\treturn validate(await this.fetch<LavalinkPlayer[]>(options));\n\t}\n\n\t/**\n\t * Gets the player with the specified guildId\n\t * @returns Promise that resolves to a Lavalink player\n\t */\n\tpublic async getPlayer(guildId: string): Promise<LavalinkPlayer> {\n\t\tconst options = {\n\t\t\tendpoint: `/sessions/${this.sessionId}/players/${guildId}`,\n\t\t\toptions: {}\n\t\t};\n\n\t\treturn validate(await this.fetch(options));\n\t}\n\n\t/**\n\t * Updates a Lavalink player\n\t * @param guildId GuildId of the player you want to update\n\t * @param updatePlayerOptions Data to update on the player\n\t * @param noReplace If you want this action to do nothing when the player is active\n\t * @returns Promise that resolves to a Lavalink player\n\t */\n\tpublic async updatePlayer(guildId: string, updatePlayerOptions: UpdatePlayerOptions, noReplace = false): Promise<LavalinkPlayer> {\n\t\tconst options = {\n\t\t\tendpoint: `/sessions/${this.sessionId}/players/${guildId}`,\n\t\t\toptions: {\n\t\t\t\tmethod: 'PATCH',\n\t\t\t\tparams: { noReplace: noReplace?.toString() ?? 'false' },\n\t\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\t\tbody: updatePlayerOptions as Record<string, unknown>\n\t\t\t}\n\t\t};\n\n\t\treturn validate(await this.fetch<LavalinkPlayer>(options));\n\t}\n\n\t/**\n\t * Deletes a Lavalink player\n\t * @param guildId guildId where this player is\n\t */\n\tpublic async destroyPlayer(guildId: string): Promise<void> {\n\t\tconst options = {\n\t\t\tendpoint: `/sessions/${this.sessionId}/players/${guildId}`,\n\t\t\toptions: { method: 'DELETE' }\n\t\t};\n\n\t\tawait this.fetch(options);\n\t}\n\n\t/**\n\t * Updates the session with a resume boolean and timeout\n\t * @param resuming Whether resuming is enabled for this session or not\n\t * @param timeout Timeout to wait for resuming\n\t * @returns Promise that resolves to a Lavalink player\n\t */\n\tpublic async updateSession(resuming?: boolean, timeout?: number): Promise<SessionInfo> {\n\t\tconst options = {\n\t\t\tendpoint: `/sessions/${this.sessionId}`,\n\t\t\toptions: {\n\t\t\t\tmethod: 'PATCH',\n\t\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\t\tbody: { resuming, timeout }\n\t\t\t}\n\t\t};\n\n\t\treturn validate(await this.fetch(options));\n\t}\n\n\t/**\n\t * Gets the status of this node\n\t * @returns Promise that resolves to a node stats response\n\t */\n\tpublic async stats(): Promise<Stats> {\n\t\tconst options = {\n\t\t\tendpoint: '/stats',\n\t\t\toptions: {}\n\t\t};\n\n\t\treturn validate(await this.fetch(options));\n\t}\n\n\t/**\n\t * Get routeplanner status from Lavalink\n\t * @returns Promise that resolves to a routeplanner response\n\t */\n\tpublic async getRoutePlannerStatus(): Promise<RoutePlanner> {\n\t\tconst options = {\n\t\t\tendpoint: '/routeplanner/status',\n\t\t\toptions: {}\n\t\t};\n\n\t\treturn validate(await this.fetch(options));\n\t}\n\n\t/**\n\t * Release blacklisted IP address into pool of IPs\n\t * @param address IP address\n\t */\n\tpublic async unmarkFailedAddress(address: string): Promise<void> {\n\t\tconst options = {\n\t\t\tendpoint: '/routeplanner/free/address',\n\t\t\toptions: {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\t\tbody: { address }\n\t\t\t}\n\t\t};\n\n\t\tawait this.fetch(options);\n\t}\n\n\t/**\n\t * Get Lavalink info\n\t */\n\tpublic async getLavalinkInfo(): Promise<NodeInfo> {\n\t\tconst options = {\n\t\t\tendpoint: '/info',\n\t\t\toptions: {\n\t\t\t\theaders: { 'Content-Type': 'application/json' }\n\t\t\t}\n\t\t};\n\n\t\treturn validate(await this.fetch(options));\n\t}\n\n\t/**\n\t * Make a request to Lavalink\n\t * @param fetchOptions.endpoint Lavalink endpoint\n\t * @param fetchOptions.options Options passed to fetch\n\t * @throws `RestError` when encountering a Lavalink error response\n\t * @internal\n\t */\n\tprotected async fetch<T = unknown>(fetchOptions: FetchOptions): Promise<T | undefined> {\n\t\tconst { endpoint, options } = fetchOptions;\n\t\tlet headers = {\n\t\t\t'Authorization': this.auth,\n\t\t\t'User-Agent': this.node.manager.options.userAgent\n\t\t};\n\n\t\tif (options.headers) headers = { ...headers, ...options.headers };\n\n\t\tconst url = new URL(`${this.url}${endpoint}`);\n\n\t\tif (options.params) url.search = new URLSearchParams(options.params).toString();\n\n\t\tconst abortController = new AbortController();\n\t\tconst timeout = setTimeout(() => abortController.abort(), this.node.manager.options.restTimeout * 1000);\n\n\t\tconst method = options.method?.toUpperCase() ?? 'GET';\n\n\t\tconst finalFetchOptions: FinalFetchOptions = {\n\t\t\tmethod,\n\t\t\theaders,\n\t\t\tsignal: abortController.signal\n\t\t};\n\n\t\tif (![ 'GET', 'HEAD' ].includes(method) && options.body)\n\t\t\tfinalFetchOptions.body = JSON.stringify(options.body);\n\n\t\tconst request = await fetch(url.toString(), finalFetchOptions)\n\t\t\t.finally(() => clearTimeout(timeout));\n\n\t\tif (!request.ok) {\n\t\t\tconst response = await request\n\t\t\t\t.json()\n\t\t\t\t.catch(() => null) as LavalinkRestError | null;\n\n\t\t\tthrow new RestError(response ?? {\n\t\t\t\ttimestamp: Date.now(),\n\t\t\t\tstatus: request.status,\n\t\t\t\terror: 'Unknown Error',\n\t\t\t\tmessage: 'Unexpected error response from Lavalink server',\n\t\t\t\tpath: endpoint\n\t\t\t});\n\t\t}\n\n\t\tif (!request.body) return undefined;\n\n\t\treturn await request.json() as T;\n\t}\n}\n\ninterface LavalinkRestError {\n\ttimestamp: number;\n\tstatus: number;\n\terror: string;\n\ttrace?: string;\n\tmessage: string;\n\tpath: string;\n}\n\nexport class RestError extends Error {\n\tpublic timestamp: number;\n\tpublic status: number;\n\tpublic error: string;\n\tpublic trace?: string;\n\tpublic path: string;\n\n\tconstructor({ timestamp, status, error, trace, message, path }: LavalinkRestError) {\n\t\tsuper(`Rest request failed with response code: ${status}${message ? ` | message: ${message}` : ''}`);\n\t\tthis.name = 'RestError';\n\t\tthis.timestamp = timestamp;\n\t\tthis.status = status;\n\t\tthis.error = error;\n\t\tthis.trace = trace;\n\t\tthis.message = message;\n\t\tthis.path = path;\n\t\tObject.setPrototypeOf(this, new.target.prototype);\n\t}\n}\n","import { Connector, ConnectorOptions } from './connectors/Connector';\nimport { ShoukakuDefaults } from './Constants';\nimport { Connection } from './guild/Connection';\nimport { ShoukakuError } from './model/Errors';\nimport type { Events } from './model/Library';\nimport {\n\tPlayerUpdate,\n\tTrackEndEvent,\n\tTrackExceptionEvent,\n\tTrackStartEvent,\n\tTrackStuckEvent,\n\tWebSocketClosedEvent\n} from './model/Player';\nimport { Node } from './node/Node';\nimport type { Rest } from './node/Rest';\nimport { Constructor, mergeDefault, TypedEventEmitter } from './Utils';\n\nexport interface Structures {\n\t/**\n\t * A custom structure that extends the Rest class\n\t */\n\trest?: Constructor<Rest>;\n}\n\nexport interface NodeOption {\n\t/**\n\t * Name of the Lavalink node\n\t */\n\tname: string;\n\t/**\n\t * Lavalink node host and port without any prefix\n\t */\n\turl: string;\n\t/**\n\t * Credentials to access Lavalink\n\t */\n\tauth: string;\n\t/**\n\t * Whether to use secure protocols or not\n\t */\n\tsecure?: boolean;\n\t/**\n\t * Name of the Lavalink node group\n\t */\n\tgroup?: string;\n}\n\nexport interface RequiredOptions {\n\t/**\n\t * The user id of the bot where this client will connect on\n\t */\n\tuserId: string;\n\t/**\n\t * List of lavalink nodes to use\n\t */\n\tnodes: NodeOption[];\n\t/**\n\t * Library connector for Discord Websocket\n\t */\n\tconnectorOptions: ConnectorOptions;\n}\n\nexport interface OptionalOptions {\n\t/**\n\t * Whether to resume a connection on disconnect to Lavalink (Server Side) (Note: DOES NOT RESUME WHEN THE LAVALINK SERVER DIES)\n\t */\n\tresume?: boolean;\n\t/**\n\t * Time to wait before lavalink starts to destroy the players of the disconnected client\n\t */\n\tresumeTimeout?: number;\n\t/**\n\t * Number of times to try and reconnect to Lavalink before giving up\n\t */\n\treconnectTries?: number;\n\t/**\n\t * Timeout before trying to reconnect\n\t */\n\treconnectInterval?: number;\n\t/**\n\t * Time to wait for a response from the Lavalink REST API before giving up\n\t */\n\trestTimeout?: number;\n\t/**\n\t * Whether to move players to a different Lavalink node when a node disconnects\n\t */\n\tmoveOnDisconnect?: boolean;\n\t/**\n\t * User Agent to use when making requests to Lavalink\n\t */\n\tuserAgent?: string;\n\t/**\n\t * Custom structures for shoukaku to use\n\t */\n\tstructures?: Structures;\n\t/**\n\t * Timeout before abort connection\n\t */\n\tvoiceConnectionTimeout?: number;\n\t/**\n\t * Node Resolver to use if you want to customize it\n\t */\n\tnodeResolver?: (nodes: Node[], connection?: Connection) => Node | undefined;\n}\n\nexport interface VoiceChannelOptions {\n\tguildId: string;\n\tshardId: number;\n\tchannelId: string;\n\tdeaf?: boolean;\n\tmute?: boolean;\n\tnode?: Node;\n}\n\n// Interfaces are not final, but types are, and therefore has an index signature\n// https://stackoverflow.com/a/64970740\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\nexport type ShoukakuEvents = {\n\t/**\n\t * Emitted when reconnect tries are occurring and how many tries are left\n\t * @eventProperty\n\t */\n\t[Events.Reconnecting]: [node: Node, reconnectsLeft: number, reconnectInterval: number];\n\t/**\n\t * Emitted when data useful for debugging is produced\n\t * @eventProperty\n\t */\n\t[Events.Debug]: [info: string];\n\t/**\n\t * Emitted when an error occurs\n\t * @eventProperty\n\t */\n\t[Events.Error]: [node: Node | NodeOption, error: Error];\n\t/**\n\t * Emitted when Shoukaku is ready to receive operations\n\t * @eventProperty\n\t */\n\t[Events.Ready]: [node: Node, lavalinkResume: boolean];\n\t/**\n\t * Emitted when a websocket connection to Lavalink is closed\n\t * @eventProperty\n\t */\n\t[Events.Close]: [node: Node, code: number, reason: string];\n\t/**\n\t * Emitted when a websocket connection to Lavalink is Disconnected\n\t * @eventProperty\n\t */\n\t[Events.Disconnect]: [node: Node];\n\t/**\n\t * Emitted when a player update event was received from lavalink\n\t * @eventProperty\n\t */\n\t[Events.PlayerUpdate]: [node: Node, data: PlayerUpdate];\n\t/**\n\t * Emitted when a player event was received from lavalink\n\t * @eventProperty\n\t */\n\t[Events.PlayerEvent]: [node: Node, data: TrackStartEvent | TrackEndEvent | TrackStuckEvent | TrackExceptionEvent | WebSocketClosedEvent];\n};\n\n/**\n * Main Shoukaku class\n */\nexport class Shoukaku extends TypedEventEmitter<Events, ShoukakuEvents> {\n\t/**\n\t * Discord library connector\n\t */\n\tpublic readonly connector: Connector;\n\t/**\n\t * Shoukaku options\n\t */\n\tpublic readonly options: Required<OptionalOptions>;\n\t/**\n\t * Connected Lavalink nodes\n\t */\n\tpublic readonly nodes: Node[];\n\t/**\n\t * Voice connections being handled\n\t */\n\tpublic readonly connections: Connection[];\n\t/**\n\t * The user id of the user this instance is using\n\t */\n\tpublic readonly userId: string;\n\t/**\n\t * @param required Required options for shoukaku to function\n\t * @param required.userId The user id of the user this instance will connect to\n\t * @param required.nodes List of initial nodes that the library will try to connect to\n\t * @param required.connectorOptions Options of the connector to communicate with Discord Websocket\n\t * @param optional Optional options to pass to create this Shoukaku instance\n\t * @param optional.resume Whether to resume a connection on disconnect to Lavalink (Server Side) (Note: DOES NOT RESUME WHEN THE LAVALINK SERVER DIES)\n\t * @param optional.resumeTimeout Time to wait before lavalink starts to destroy the players of the disconnected client\n\t * @param optional.resumeByLibrary Whether to resume the players by doing it in the library side (Client Side) (Note: TRIES TO RESUME REGARDLESS OF WHAT HAPPENED ON A LAVALINK SERVER)\n\t * @param optional.reconnectTries Number of times to try and reconnect to Lavalink before giving up\n\t * @param optional.reconnectInterval Timeout before trying to reconnect\n\t * @param optional.restTimeout Time to wait for a response from the Lavalink REST API before giving up\n\t * @param optional.moveOnDisconnect Whether to move players to a different Lavalink node when a node disconnects\n\t * @param optional.userAgent User Agent to use when making requests to Lavalink\n\t * @param optional.structures Custom structures for shoukaku to use\n\t * @param optional.nodeResolver Used if you have custom lavalink node resolving\n\t */\n\tconstructor(required: RequiredOptions, optional: OptionalOptions = {}) {\n\t\tsuper();\n\t\tthis.connector = new Connector(this, required.connectorOptions);\n\t\tthis.options = mergeDefault<OptionalOptions>(ShoukakuDefaults, optional);\n\t\tthis.nodes = [];\n\t\tthis.connections = [];\n\t\tthis.userId = required.userId;\n\n\t\tfor (const option of required.nodes) {\n\t\t\tthis.nodes.push(new Node(this, option));\n\t\t}\n\t}\n\n\t/**\n\t * @returns The amount of cached player count\n\t */\n\tpublic getPlayerCount(): number {\n\t\tlet players = 0;\n\t\tfor (const node of this.nodes.values()) {\n\t\t\tplayers += node.stats?.players ?? 0;\n\t\t}\n\t\treturn players;\n\t}\n\n\t/**\n\t * @returns The latest player count being handled\n\t */\n\tpublic async fetchPlayerCount(): Promise<number> {\n\t\tlet players = 0;\n\t\tfor (const node of this.nodes.values()) {\n\t\t\tconst player = await node.rest.getPlayers();\n\t\t\tplayers += player.length;\n\t\t}\n\t\treturn players;\n\t}\n\n\t/**\n\t * Gets an ideal node based on the nodeResolver you provided\n\t * @param connection Optional connection class for ideal node selection, if you use it\n\t * @returns An ideal node for you to do things with\n\t */\n\tpublic getIdealNode(connection?: Connection): Node | undefined {\n\t\treturn this.options.nodeResolver(this.nodes, connection);\n\t}\n\n\t/**\n\t * Connects every node that shoukaku manages if it's disconnected\n\t */\n\tpublic async connect(): Promise<void> {\n\t\tawait Promise.all(this.nodes.map(node => node.connect()));\n\t}\n\n\t/**\n\t * Connects a specific node shoukaku manages if it's disconnected\n\t * @param name Node name to connect\n\t */\n\tpublic async connectNodeNamed(name: string): Promise<void> {\n\t\tconst node = this.nodes.find(n => n.name === name);\n\n\t\tawait node?.connect();\n\t}\n\n\t/**\n\t * Add a Lavalink node to the pool of available nodes then tries to connect it\n\t * @param options.name Name of this node\n\t * @param options.url URL of Lavalink\n\t * @param options.auth Credentials to access Lavalnk\n\t * @param options.secure Whether to use secure protocols or not\n\t * @param options.group Group of this node\n\t */\n\tpublic async addNode(options: NodeOption): Promise<void> {\n\t\tconst node = new Node(this, options);\n\n\t\tawait node.connect();\n\n\t\tthis.nodes.push(node);\n\t}\n\n\t/**\n\t * Remove a Lavalink node from the pool of available nodes\n\t * @param name Name of the node\n\t * @param reason Reason of removing the node\n\t */\n\tpublic removeNode(name: string, reason = 'Remove node executed'): void {\n\t\tconst index = this.nodes.findIndex(n => n.name === name);\n\n\t\tif (index === -1)\n\t\t\tthrow new ShoukakuError<{ name: string; available: string[] }>({ name, available: this.nodes.map(node => node.name) }, 'The node you are disconnecting from don\\'t exist');\n\n\t\tconst node = this.nodes.splice(index, 1)[0];\n\n\t\tnode?.destroy(1000, reason);\n\t}\n\n\t/**\n\t * Joins a voice channel\n\t * @param options.guildId GuildId in which the ChannelId of the voice channel is located\n\t * @param options.shardId ShardId to track where this should send on sharded websockets, put 0 if you are unsharded\n\t * @param options.channelId ChannelId of the voice channel you want to connect to\n\t * @param options.deaf Optional boolean value to specify whether to deafen or undeafen the current bot user\n\t * @param options.mute Optional boolean value to specify whether to mute or unmute the current bot user\n\t * @returns A weak reference to the connection, where you can create a new basic player by passing it to the class\n\t */\n\tpublic async joinVoiceChannel(options: VoiceChannelOptions): Promise<WeakRef<Connection>> {\n\t\tif (this.connections.some(conn => conn.guildId === options.guildId))\n\t\t\tthrow new ShoukakuError<VoiceChannelOptions>(options, 'This guild you are connecting to already have an existing connection');\n\n\t\tconst connection = new Connection(this, options);\n\n\t\tthis.connections.push(connection);\n\n\t\ttry {\n\t\t\tawait connection.connect();\n\t\t} catch (error) {\n\t\t\tthis.deleteConnection(options.guildId);\n\t\t\tthrow error;\n\t\t}\n\n\t\tconst cleanup = () => {\n\t\t\tconnection.disconnect();\n\t\t\tthis.deleteConnection(options.guildId);\n\t\t};\n\n\t\tconst node = options.node ?? this.getIdealNode(connection);\n\n\t\tif (!node) {\n\t\t\tcleanup();\n\t\t\tthrow new ShoukakuError<VoiceChannelOptions>(options, 'There\\'s no node available to connect to');\n\t\t}\n\n\t\ttry {\n\t\t\tawait node.rest.updatePlayer(options.guildId, {\n\t\t\t\tvoice: {\n\t\t\t\t\ttoken: connection.serverUpdate!.token,\n\t\t\t\t\tendpoint: connection.serverUpdate!.endpoint,\n\t\t\t\t\tsessionId: connection.sessionId!\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tcleanup();\n\t\t\tthrow error;\n\t\t}\n\n\t\tnode.connections.add(connection);\n\n\t\treturn new WeakRef(connection);\n\t}\n\n\t/**\n\t * Leaves a voice channel\n\t * @param guildId The id of the guild you want to delete\n\t * @returns The destroyed / disconnected player or undefined if none\n\t */\n\tpublic leaveVoiceChannel(guildId: string): void {\n\t\tconst connection = this.connections.find(conn => conn.guildId === guildId);\n\t\tconnection?.disconnect();\n\n\t\tthis.deleteConnection(guildId);\n\t}\n\n\t/**\n\t * Leaves current voice channel and joins a new one\n\t * @param guildId GuildId in which the ChannelId of the voice channel is located\n\t * @param channelId Id of channel to move to\n\t * @throws {@link Error} When guild does not have an existing connection, or could not be moved\n\t * @returns The moved player\n\t */\n\tpublic moveVoiceChannel(guildId: string, channelId: string) {\n\t\tconst connection = this.connections.find(conn => conn.guildId === guildId);\n\n\t\tif (!connection)\n\t\t\tthrow new ShoukakuError<{ guildId: string; channelId: string }>({ guildId, channelId }, 'This guild don\\'t have an existing connection');\n\n\t\tif (connection.channelId === channelId) return;\n\n\t\tconnection.setStateUpdate({\n\t\t\tsession_id: connection.sessionId!,\n\t\t\tchannel_id: channelId,\n\t\t\tself_deaf: connection.deafened,\n\t\t\tself_mute: connection.muted\n\t\t});\n\n\t\tconnection.sendVoiceUpdate();\n\t}\n\n\t/**\n\t * Deletes a connection from array\n\t * @param guildId\n\t * @internal\n\t * @private\n\t */\n\tprivate deleteConnection(guildId: string): Connection | undefined {\n\t\tconst index = this.connections.findIndex(conn => conn.guildId === guildId);\n\n\t\tif (index === -1) return;\n\n\t\treturn this.connections.splice(index, 1)[0];\n\t}\n}\n"],"mappings":"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","names":["ConnectionState","VoiceState","Events","client","EventEmitter","EventEmitter","LavalinkOpCodes","PlayerEventType","LoadType","error","node"]}